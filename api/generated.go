// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// Author for a build
type BuildAuthorInput struct {
	// The name for the build author
	Name string `json:"name"`
	// The email for the build author
	Email string `json:"email"`
}

// GetName returns BuildAuthorInput.Name, and is useful for accessing the field via an interface.
func (v *BuildAuthorInput) GetName() string { return v.Name }

// GetEmail returns BuildAuthorInput.Email, and is useful for accessing the field via an interface.
func (v *BuildAuthorInput) GetEmail() string { return v.Email }

// BuildCancelBuildCancelBuildCancelPayload includes the requested fields of the GraphQL type BuildCancelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of BuildCancel
type BuildCancelBuildCancelBuildCancelPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
}

// GetClientMutationId returns BuildCancelBuildCancelBuildCancelPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCancelBuildCancelBuildCancelPayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// Autogenerated input type of BuildCancel
type BuildCancelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	Id               string  `json:"id"`
}

// GetClientMutationId returns BuildCancelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCancelInput) GetClientMutationId() *string { return v.ClientMutationId }

// GetId returns BuildCancelInput.Id, and is useful for accessing the field via an interface.
func (v *BuildCancelInput) GetId() string { return v.Id }

// BuildCancelResponse is returned by BuildCancel on success.
type BuildCancelResponse struct {
	// Cancel a build.
	BuildCancel *BuildCancelBuildCancelBuildCancelPayload `json:"buildCancel"`
}

// GetBuildCancel returns BuildCancelResponse.BuildCancel, and is useful for accessing the field via an interface.
func (v *BuildCancelResponse) GetBuildCancel() *BuildCancelBuildCancelBuildCancelPayload {
	return v.BuildCancel
}

// BuildCreateBuildCreateBuildCreatePayload includes the requested fields of the GraphQL type BuildCreatePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of BuildCreate
type BuildCreateBuildCreateBuildCreatePayload struct {
	Build *BuildCreateBuildCreateBuildCreatePayloadBuild `json:"build"`
}

// GetBuild returns BuildCreateBuildCreateBuildCreatePayload.Build, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayload) GetBuild() *BuildCreateBuildCreateBuildCreatePayloadBuild {
	return v.Build
}

// BuildCreateBuildCreateBuildCreatePayloadBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type BuildCreateBuildCreateBuildCreatePayloadBuild struct {
	// The UUID for the build
	Uuid string `json:"uuid"`
}

// GetUuid returns BuildCreateBuildCreateBuildCreatePayloadBuild.Uuid, and is useful for accessing the field via an interface.
func (v *BuildCreateBuildCreateBuildCreatePayloadBuild) GetUuid() string { return v.Uuid }

// Autogenerated input type of BuildCreate
type BuildCreateInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	// The GraphQL ID of the pipeline you want to create a build on
	PipelineID string `json:"pipelineID"`
	// The message that is displayed on the build
	Message *string `json:"message"`
	// The commit for the build
	Commit *string `json:"commit"`
	// The branch for the build
	Branch *string `json:"branch"`
	// Environment variables used for the build
	Env      []string             `json:"env"`
	MetaData []BuildMetaDataInput `json:"metaData"`
	Author   *BuildAuthorInput    `json:"author"`
}

// GetClientMutationId returns BuildCreateInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetClientMutationId() *string { return v.ClientMutationId }

// GetPipelineID returns BuildCreateInput.PipelineID, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetPipelineID() string { return v.PipelineID }

// GetMessage returns BuildCreateInput.Message, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetMessage() *string { return v.Message }

// GetCommit returns BuildCreateInput.Commit, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetCommit() *string { return v.Commit }

// GetBranch returns BuildCreateInput.Branch, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetBranch() *string { return v.Branch }

// GetEnv returns BuildCreateInput.Env, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetEnv() []string { return v.Env }

// GetMetaData returns BuildCreateInput.MetaData, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetMetaData() []BuildMetaDataInput { return v.MetaData }

// GetAuthor returns BuildCreateInput.Author, and is useful for accessing the field via an interface.
func (v *BuildCreateInput) GetAuthor() *BuildAuthorInput { return v.Author }

// BuildCreateResponse is returned by BuildCreate on success.
type BuildCreateResponse struct {
	// Create a build.
	BuildCreate *BuildCreateBuildCreateBuildCreatePayload `json:"buildCreate"`
}

// GetBuildCreate returns BuildCreateResponse.BuildCreate, and is useful for accessing the field via an interface.
func (v *BuildCreateResponse) GetBuildCreate() *BuildCreateBuildCreateBuildCreatePayload {
	return v.BuildCreate
}

// Meta-data key/value pairs for a build
type BuildMetaDataInput struct {
	// The key for this meta-data item
	Key string `json:"key"`
	// The value for this meta-data item
	Value string `json:"value"`
}

// GetKey returns BuildMetaDataInput.Key, and is useful for accessing the field via an interface.
func (v *BuildMetaDataInput) GetKey() string { return v.Key }

// GetValue returns BuildMetaDataInput.Value, and is useful for accessing the field via an interface.
func (v *BuildMetaDataInput) GetValue() string { return v.Value }

// All the possible states a build can be in
type BuildStates string

const (
	// The build was skipped
	BuildStatesSkipped BuildStates = "SKIPPED"
	// The build is currently being created
	BuildStatesCreating BuildStates = "CREATING"
	// The build has yet to start running jobs
	BuildStatesScheduled BuildStates = "SCHEDULED"
	// The build is currently running jobs
	BuildStatesRunning BuildStates = "RUNNING"
	// The build passed
	BuildStatesPassed BuildStates = "PASSED"
	// The build failed
	BuildStatesFailed BuildStates = "FAILED"
	// The build is failing
	BuildStatesFailing BuildStates = "FAILING"
	// The build is currently being canceled
	BuildStatesCanceling BuildStates = "CANCELING"
	// The build was canceled
	BuildStatesCanceled BuildStates = "CANCELED"
	// The build is blocked
	BuildStatesBlocked BuildStates = "BLOCKED"
	// The build wasn't run
	BuildStatesNotRun BuildStates = "NOT_RUN"
)

// GetBuildBuild includes the requested fields of the GraphQL type Build.
// The GraphQL type's documentation follows.
//
// A build from a pipeline
type GetBuildBuild struct {
	// The current state of the build
	State BuildStates `json:"state"`
}

// GetState returns GetBuildBuild.State, and is useful for accessing the field via an interface.
func (v *GetBuildBuild) GetState() BuildStates { return v.State }

// GetBuildResponse is returned by GetBuild on success.
type GetBuildResponse struct {
	// Find a build by its slug or UUID
	Build *GetBuildBuild `json:"build"`
}

// GetBuild returns GetBuildResponse.Build, and is useful for accessing the field via an interface.
func (v *GetBuildResponse) GetBuild() *GetBuildBuild { return v.Build }

// GetOrganizationOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An organization
type GetOrganizationOrganization struct {
	Id string `json:"id"`
}

// GetId returns GetOrganizationOrganization.Id, and is useful for accessing the field via an interface.
func (v *GetOrganizationOrganization) GetId() string { return v.Id }

// GetOrganizationResponse is returned by GetOrganization on success.
type GetOrganizationResponse struct {
	// Find an organization by its slug
	Organization *GetOrganizationOrganization `json:"organization"`
}

// GetOrganization returns GetOrganizationResponse.Organization, and is useful for accessing the field via an interface.
func (v *GetOrganizationResponse) GetOrganization() *GetOrganizationOrganization {
	return v.Organization
}

// The access levels that can be assigned to a pipeline
type PipelineAccessLevels string

const (
	// Allows edits, builds and reads
	PipelineAccessLevelsManageBuildAndRead PipelineAccessLevels = "MANAGE_BUILD_AND_READ"
	// Allows builds and read only
	PipelineAccessLevelsBuildAndRead PipelineAccessLevels = "BUILD_AND_READ"
	// Read only - no builds or edits
	PipelineAccessLevelsReadOnly PipelineAccessLevels = "READ_ONLY"
)

// Autogenerated input type of PipelineCreate
type PipelineCreateInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId,omitempty"`
	OrganizationId   string  `json:"organizationId,omitempty"`
	// The name of the pipeline.
	Name string `json:"name,omitempty"`
	// A description of this pipeline.
	Description *string `json:"description,omitempty"`
	// The visibility of the pipeline, either PUBLIC or PRIVATE.
	Visibility *PipelineVisibility `json:"visibility,omitempty"`
	// A source code repository that will back this pipeline
	Repository PipelineRepositoryInput `json:"repository,omitempty"`
	// Steps used by this pipeline defined as YAML
	Steps PipelineStepsInput `json:"steps,omitempty"`
	// If intermediate builds should be skipped as new builds are created
	SkipIntermediateBuilds *bool `json:"skipIntermediateBuilds,omitempty"`
	// A branch filter to scope which builds this is applied to
	SkipIntermediateBuildsBranchFilter *string `json:"skipIntermediateBuildsBranchFilter,omitempty"`
	// If intermediate builds should be canceled as new builds are created
	CancelIntermediateBuilds *bool `json:"cancelIntermediateBuilds,omitempty"`
	// A branch filter to scope which builds this is applied to
	CancelIntermediateBuildsBranchFilter *string `json:"cancelIntermediateBuildsBranchFilter,omitempty"`
	// If existing builds can be rebuilt as new builds.
	AllowRebuilds *bool `json:"allowRebuilds,omitempty"`
	// Which teams this pipeline should be assigned to
	Teams []PipelineTeamAssignmentInput `json:"teams,omitempty"`
	// The default branch used to show statistics about the build
	DefaultBranch *string `json:"defaultBranch,omitempty"`
	// The initial build number to use in the sequence
	NextBuildNumber *int `json:"nextBuildNumber,omitempty"`
	// The GraphQL ID of the cluster you want to use for the pipeline
	ClusterId *string `json:"clusterId,omitempty"`
	// Tags you want this pipeline to have
	Tags []PipelineTagInput `json:"tags,omitempty"`
	// A branch filter pattern to limit which pushed branches trigger builds on this pipeline.
	BranchConfiguration *string `json:"branchConfiguration,omitempty"`
}

// GetClientMutationId returns PipelineCreateInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetClientMutationId() *string { return v.ClientMutationId }

// GetOrganizationId returns PipelineCreateInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetOrganizationId() string { return v.OrganizationId }

// GetName returns PipelineCreateInput.Name, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetName() string { return v.Name }

// GetDescription returns PipelineCreateInput.Description, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetDescription() *string { return v.Description }

// GetVisibility returns PipelineCreateInput.Visibility, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetVisibility() *PipelineVisibility { return v.Visibility }

// GetRepository returns PipelineCreateInput.Repository, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetRepository() PipelineRepositoryInput { return v.Repository }

// GetSteps returns PipelineCreateInput.Steps, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetSteps() PipelineStepsInput { return v.Steps }

// GetSkipIntermediateBuilds returns PipelineCreateInput.SkipIntermediateBuilds, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetSkipIntermediateBuilds() *bool { return v.SkipIntermediateBuilds }

// GetSkipIntermediateBuildsBranchFilter returns PipelineCreateInput.SkipIntermediateBuildsBranchFilter, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetSkipIntermediateBuildsBranchFilter() *string {
	return v.SkipIntermediateBuildsBranchFilter
}

// GetCancelIntermediateBuilds returns PipelineCreateInput.CancelIntermediateBuilds, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetCancelIntermediateBuilds() *bool { return v.CancelIntermediateBuilds }

// GetCancelIntermediateBuildsBranchFilter returns PipelineCreateInput.CancelIntermediateBuildsBranchFilter, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetCancelIntermediateBuildsBranchFilter() *string {
	return v.CancelIntermediateBuildsBranchFilter
}

// GetAllowRebuilds returns PipelineCreateInput.AllowRebuilds, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetAllowRebuilds() *bool { return v.AllowRebuilds }

// GetTeams returns PipelineCreateInput.Teams, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetTeams() []PipelineTeamAssignmentInput { return v.Teams }

// GetDefaultBranch returns PipelineCreateInput.DefaultBranch, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetDefaultBranch() *string { return v.DefaultBranch }

// GetNextBuildNumber returns PipelineCreateInput.NextBuildNumber, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetNextBuildNumber() *int { return v.NextBuildNumber }

// GetClusterId returns PipelineCreateInput.ClusterId, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetClusterId() *string { return v.ClusterId }

// GetTags returns PipelineCreateInput.Tags, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetTags() []PipelineTagInput { return v.Tags }

// GetBranchConfiguration returns PipelineCreateInput.BranchConfiguration, and is useful for accessing the field via an interface.
func (v *PipelineCreateInput) GetBranchConfiguration() *string { return v.BranchConfiguration }

// PipelineCreatePipelineCreatePipelineCreatePayload includes the requested fields of the GraphQL type PipelineCreatePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of PipelineCreate
type PipelineCreatePipelineCreatePipelineCreatePayload struct {
	Pipeline PipelineCreatePipelineCreatePipelineCreatePayloadPipeline `json:"pipeline"`
}

// GetPipeline returns PipelineCreatePipelineCreatePipelineCreatePayload.Pipeline, and is useful for accessing the field via an interface.
func (v *PipelineCreatePipelineCreatePipelineCreatePayload) GetPipeline() PipelineCreatePipelineCreatePipelineCreatePayloadPipeline {
	return v.Pipeline
}

// PipelineCreatePipelineCreatePipelineCreatePayloadPipeline includes the requested fields of the GraphQL type Pipeline.
// The GraphQL type's documentation follows.
//
// A pipeline
type PipelineCreatePipelineCreatePipelineCreatePayloadPipeline struct {
	Id string `json:"id"`
}

// GetId returns PipelineCreatePipelineCreatePipelineCreatePayloadPipeline.Id, and is useful for accessing the field via an interface.
func (v *PipelineCreatePipelineCreatePipelineCreatePayloadPipeline) GetId() string { return v.Id }

// PipelineCreateResponse is returned by PipelineCreate on success.
type PipelineCreateResponse struct {
	// Create a pipeline.
	PipelineCreate *PipelineCreatePipelineCreatePipelineCreatePayload `json:"pipelineCreate"`
}

// GetPipelineCreate returns PipelineCreateResponse.PipelineCreate, and is useful for accessing the field via an interface.
func (v *PipelineCreateResponse) GetPipelineCreate() *PipelineCreatePipelineCreatePipelineCreatePayload {
	return v.PipelineCreate
}

// Autogenerated input type of PipelineDelete
type PipelineDeleteInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
	Id               string  `json:"id"`
}

// GetClientMutationId returns PipelineDeleteInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineDeleteInput) GetClientMutationId() *string { return v.ClientMutationId }

// GetId returns PipelineDeleteInput.Id, and is useful for accessing the field via an interface.
func (v *PipelineDeleteInput) GetId() string { return v.Id }

// PipelineDeletePipelineDeletePipelineDeletePayload includes the requested fields of the GraphQL type PipelineDeletePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of PipelineDelete
type PipelineDeletePipelineDeletePipelineDeletePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId *string `json:"clientMutationId"`
}

// GetClientMutationId returns PipelineDeletePipelineDeletePipelineDeletePayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *PipelineDeletePipelineDeletePipelineDeletePayload) GetClientMutationId() *string {
	return v.ClientMutationId
}

// PipelineDeleteResponse is returned by PipelineDelete on success.
type PipelineDeleteResponse struct {
	// Delete a pipeline.
	PipelineDelete *PipelineDeletePipelineDeletePipelineDeletePayload `json:"pipelineDelete"`
}

// GetPipelineDelete returns PipelineDeleteResponse.PipelineDelete, and is useful for accessing the field via an interface.
func (v *PipelineDeleteResponse) GetPipelineDelete() *PipelineDeletePipelineDeletePipelineDeletePayload {
	return v.PipelineDelete
}

// Repository information for a pipeline
type PipelineRepositoryInput struct {
	// The remote URL for this repository i.e. git@github.com:foo/bar.git
	Url string `json:"url,omitempty"`
}

// GetUrl returns PipelineRepositoryInput.Url, and is useful for accessing the field via an interface.
func (v *PipelineRepositoryInput) GetUrl() string { return v.Url }

// Step definition for a pipeline
type PipelineStepsInput struct {
	// A YAML representation of the steps in this pipeline. This is formatted the same as `buildkite-agent pipeline upload
	Yaml string `json:"yaml,omitempty"`
}

// GetYaml returns PipelineStepsInput.Yaml, and is useful for accessing the field via an interface.
func (v *PipelineStepsInput) GetYaml() string { return v.Yaml }

// Tag associated with a pipeline
type PipelineTagInput struct {
	// The label of this tag
	Label string `json:"label,omitempty"`
}

// GetLabel returns PipelineTagInput.Label, and is useful for accessing the field via an interface.
func (v *PipelineTagInput) GetLabel() string { return v.Label }

// Used to assign teams to pipelines
type PipelineTeamAssignmentInput struct {
	// The ID of the team you want to be assigned
	Id string `json:"id,omitempty"`
	// The access level members within the team have to the pipeline
	AccessLevel *PipelineAccessLevels `json:"accessLevel,omitempty"`
}

// GetId returns PipelineTeamAssignmentInput.Id, and is useful for accessing the field via an interface.
func (v *PipelineTeamAssignmentInput) GetId() string { return v.Id }

// GetAccessLevel returns PipelineTeamAssignmentInput.AccessLevel, and is useful for accessing the field via an interface.
func (v *PipelineTeamAssignmentInput) GetAccessLevel() *PipelineAccessLevels { return v.AccessLevel }

// The visibility of the pipeline
type PipelineVisibility string

const (
	// The pipeline is public
	PipelineVisibilityPublic PipelineVisibility = "PUBLIC"
	// The pipeline is private
	PipelineVisibilityPrivate PipelineVisibility = "PRIVATE"
)

// __BuildCancelInput is used internally by genqlient
type __BuildCancelInput struct {
	Input BuildCancelInput `json:"input"`
}

// GetInput returns __BuildCancelInput.Input, and is useful for accessing the field via an interface.
func (v *__BuildCancelInput) GetInput() BuildCancelInput { return v.Input }

// __BuildCreateInput is used internally by genqlient
type __BuildCreateInput struct {
	Input BuildCreateInput `json:"input"`
}

// GetInput returns __BuildCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__BuildCreateInput) GetInput() BuildCreateInput { return v.Input }

// __GetBuildInput is used internally by genqlient
type __GetBuildInput struct {
	Uuid *string `json:"uuid"`
}

// GetUuid returns __GetBuildInput.Uuid, and is useful for accessing the field via an interface.
func (v *__GetBuildInput) GetUuid() *string { return v.Uuid }

// __GetOrganizationInput is used internally by genqlient
type __GetOrganizationInput struct {
	Slug string `json:"slug"`
}

// GetSlug returns __GetOrganizationInput.Slug, and is useful for accessing the field via an interface.
func (v *__GetOrganizationInput) GetSlug() string { return v.Slug }

// __PipelineCreateInput is used internally by genqlient
type __PipelineCreateInput struct {
	Input PipelineCreateInput `json:"input,omitempty"`
}

// GetInput returns __PipelineCreateInput.Input, and is useful for accessing the field via an interface.
func (v *__PipelineCreateInput) GetInput() PipelineCreateInput { return v.Input }

// __PipelineDeleteInput is used internally by genqlient
type __PipelineDeleteInput struct {
	Input PipelineDeleteInput `json:"input"`
}

// GetInput returns __PipelineDeleteInput.Input, and is useful for accessing the field via an interface.
func (v *__PipelineDeleteInput) GetInput() PipelineDeleteInput { return v.Input }

func BuildCancel(
	ctx context.Context,
	client graphql.Client,
	input BuildCancelInput,
) (*BuildCancelResponse, error) {
	req := &graphql.Request{
		OpName: "BuildCancel",
		Query: `
mutation BuildCancel ($input: BuildCancelInput!) {
	buildCancel(input: $input) {
		clientMutationId
	}
}
`,
		Variables: &__BuildCancelInput{
			Input: input,
		},
	}
	var err error

	var data BuildCancelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func BuildCreate(
	ctx context.Context,
	client graphql.Client,
	input BuildCreateInput,
) (*BuildCreateResponse, error) {
	req := &graphql.Request{
		OpName: "BuildCreate",
		Query: `
mutation BuildCreate ($input: BuildCreateInput!) {
	buildCreate(input: $input) {
		build {
			uuid
		}
	}
}
`,
		Variables: &__BuildCreateInput{
			Input: input,
		},
	}
	var err error

	var data BuildCreateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetBuild(
	ctx context.Context,
	client graphql.Client,
	uuid *string,
) (*GetBuildResponse, error) {
	req := &graphql.Request{
		OpName: "GetBuild",
		Query: `
query GetBuild ($uuid: ID) {
	build(uuid: $uuid) {
		state
	}
}
`,
		Variables: &__GetBuildInput{
			Uuid: uuid,
		},
	}
	var err error

	var data GetBuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetOrganization(
	ctx context.Context,
	client graphql.Client,
	slug string,
) (*GetOrganizationResponse, error) {
	req := &graphql.Request{
		OpName: "GetOrganization",
		Query: `
query GetOrganization ($slug: ID!) {
	organization(slug: $slug) {
		id
	}
}
`,
		Variables: &__GetOrganizationInput{
			Slug: slug,
		},
	}
	var err error

	var data GetOrganizationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PipelineCreate(
	ctx context.Context,
	client graphql.Client,
	input PipelineCreateInput,
) (*PipelineCreateResponse, error) {
	req := &graphql.Request{
		OpName: "PipelineCreate",
		Query: `
mutation PipelineCreate ($input: PipelineCreateInput!) {
	pipelineCreate(input: $input) {
		pipeline {
			id
		}
	}
}
`,
		Variables: &__PipelineCreateInput{
			Input: input,
		},
	}
	var err error

	var data PipelineCreateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PipelineDelete(
	ctx context.Context,
	client graphql.Client,
	input PipelineDeleteInput,
) (*PipelineDeleteResponse, error) {
	req := &graphql.Request{
		OpName: "PipelineDelete",
		Query: `
mutation PipelineDelete ($input: PipelineDeleteInput!) {
	pipelineDelete(input: $input) {
		clientMutationId
	}
}
`,
		Variables: &__PipelineDeleteInput{
			Input: input,
		},
	}
	var err error

	var data PipelineDeleteResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
