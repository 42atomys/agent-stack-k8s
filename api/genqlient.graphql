fragment CommandJob on JobTypeCommand {
  uuid
  env
  label
  state
  agentQueryRules
  exitStatus
  scheduledAt
  agent {
    name
  }
}

# @genqlient(omitempty: true)
mutation PipelineCreate(
  # need line break here due to https://github.com/Khan/genqlient/issues/151
  $input: PipelineCreateInput!
) {
  pipelineCreate(input: $input) {
    pipeline {
      id
      name
    }
  }
}

mutation PipelineDelete($input: PipelineDeleteInput!) {
  pipelineDelete(input: $input) {
    clientMutationId
  }
}

query SearchPipelines($slug: ID!, $search: String!, $first: Int!) {
  organization(slug: $slug) {
    pipelines(search: $search, first: $first) {
      edges {
        node {
          id
          name
        }
      }
    }
  }
}

mutation BuildCreate($input: BuildCreateInput!) {
  buildCreate(input: $input) {
    build {
      uuid
      id
      number
      jobs(first: 100) {
        edges {
          node {
            ... on JobTypeCommand {
              ...CommandJob
            }
          }
        }
      }
    }
  }
}

mutation BuildCancel($input: BuildCancelInput!) {
  buildCancel(input: $input) {
    clientMutationId
  }
}

query GetOrganization($slug: ID!) {
  organization(slug: $slug) {
    id
  }
}

query GetBuild($uuid: ID!) {
  build(uuid: $uuid) {
    state
  }
}

query GetBuildsForPipelineBySlug($slug: ID!) {
  pipeline(slug: $slug) {
    id
    jobs(
      state: [SCHEDULED, RUNNING, ACCEPTED, ASSIGNED]
      type: [COMMAND]
      first: 500
    ) {
      count
      edges {
        node {
          ... on JobTypeCommand {
            ...CommandJob
          }
        }
      }
    }
  }
}
